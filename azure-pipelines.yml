trigger:
- main
- feature/*

pr:
- none

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  containerRegistry: 'asp_dot_net_docker'

stages:
- stage: Build
  displayName: Build Image
  jobs:
  - job: build
    displayName: Build
    pool:
      vmImage: windows-latest
    steps:
    - task: UseDotNet@2
      displayName: use dotnet asp core
      inputs:
        pacakgeType: sdk

        version: '8.0.x'

    - script: |
        dotnet restore weatherapi/weatherapi.csproj
      displayName: restore packages

    - task: SonarQubePrepare@6
      inputs:
        SonarQube: 'Sonarqube_source'
        scannerMode: 'MSBuild'
        projectKey: 'Intial_app_dotnet_Intial_app_dotnet_26be5bf9-11c5-486e-884c-7796d593a2e0'
        projectName: 'soanrqube_analysis'

    - script: |
        dotnet build weatherapi/weatherapi.csproj --configuration Debug
      displayName: build the project

    - task: SonarQubeAnalyze@6
      inputs:
        jdkversion: 'JAVA_HOME_17_X64'

    - task: SonarQubePublish@6
      inputs:
        pollingTimeoutSec: '300'

    - task: Docker@2
      displayName: Build and Push Docker Image
      inputs:
        containerRegistry: $(containerRegistry)
        repository: 'khangeshmatte123/dotnet'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
           $(tag)

- stage: Test
  displayName: Test Image
  dependsOn: Build
  jobs: 
  - job: Test
    displayName: Unit testing
    pool:
      vmImage: windows-latest
    steps:
    - script: |
        mkdir -p TestResults
        dotnet test weatherapi/weatherapi.csproj --configuration Debug --no-build --logger "trx;LogFileName=TestResults/test_results.trx"
      displayName: Run Tests

    - task: PublishTestResults@2
      displayName: Publish test results
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*.trx'
        mergeTestResults: true
        failTaskOnFailedTests: true
        failTaskOnFailureToPublishResults: true


- stage: Deploy
  displayName: Deploy Image
  dependsOn: Build
  jobs: 
  - job: deploy
    displayName: Deploy
    pool:
      vmImage: windows-latest
    steps:
    - script: |
        echo "Running weatherapi using docker compose"
    - task: DockerCompose@0
      displayName: Run Docker Compose
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: $(containerRegistry)
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'up -d'
