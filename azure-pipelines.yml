trigger:
- main

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  containerRegistry: 'asp_dot_net_docker'

stages:
- stage: Build
  displayName: Build Image
  jobs:
  - job: build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: UseDotNet@2
      displayName: use dotnet asp core
      inputs:
        packageType: sdk
        version: '8.0.x'

    - script: |
        dotnet restore weatherapi/weatherapi.csproj
      displayName: restore packages
    
    - task: SonarCloudPrepare@2
      inputs:
        SonarCloud: 'Sonarcube'
        organization: 'dotnet-sonarcube'
        scannerMode: 'MSBuild'
        projectKey: 'Khangesh_Intial_app_dotnet'
        projectName: 'sonarcloud analysis'

    - script: |
        dotnet build weatherapi/weatherapi.csproj --configuration Debug
      displayName: build the project

    - task: SonarCloudAnalyze@2
      inputs:
          jdkversion: 'JAVA_HOME_17_X64'

    - task: SonarCloudPublish@2
      inputs:
          pollingTimeoutSec: '300'

    - task: Docker@2
      displayName: Build and Push Docker Image
      inputs:
        containerRegistry: $(containerRegistry)
        repository: 'khangeshmatte123/dotnet'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
           $(tag)

- stage: Test
  displayName: Test Image
  dependsOn: Build
  jobs: 
  - job: Test
    displayName: Unit testing
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: |

      displayName: Run Tests
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '**/weatherapi.Tests.csproj'
        configuration: '(buildConfiguration)'
        arguments: '--collect:"XPlat Code Coverage" --logger "trx;LogFileName=testresults.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'


- stage: Staging
  displayName: Staging Deploy
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: stagingDeploy
    displayName: Creating staging enviornment
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: |
        echo "Running Staging before deployment"
    - task: DockerCompose@0
      displayName: Run Docker Compose
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: $(containerRegistry)
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'up -d'
        build: false

- stage: Deploy
  displayName: Deploy Image
  dependsOn: Staging
  jobs: 
  - job: deploy
    displayName: Deploy
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: |
        echo "Running weatherapi using docker compose"
    - task: DockerCompose@0
      displayName: Run Docker Compose
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: $(containerRegistry)
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'up -d'
        build: false
